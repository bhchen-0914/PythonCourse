# -*- coding: UTF-8 -*-
"""
列表、元组的学习
"""

list1 = [1, 2, 3, 4, 5]
print(type(list1))  # 用[]包装，‘，’隔开

list2 = [1, 2, 'hello', 3.14, True, False, [1, 2], list1, {'name': 'john'}, (1, 2), 0]
# 列表中的元素可包含数字、浮点型数字、字符串、布尔值、列表等
print(type(list2))

# 通过下标索引列表
print(list2[0])
print(list2[2])
print(list2[-1:])
print(list2[1:3])  # 当对列表进行切片操作时，返回的值也是一个列表

# 可以用 + 来实现列表的加法，列表没有减法
list3 = list1 + [99, 100]
print(list3)

# 列表的乘法是将列表内的元素重复n次
print(list3 * 3)

tuple1 = (1, 2, 'hello', 3.14, True, [1, 2, 3])
# 元组的元素可包括数字、浮点型数字、字符串、布尔值、列表等
print(type(tuple1))

# 元组的索引方式和列表一致
print(tuple1[0])
print(tuple1[4])
print(tuple1[1:3])  # 当对元组进行切片操作时，返回的值也是一个元组

'''
元组也有加法和乘法，规则与列表相似
'''
print(type('hello world'))  # 档元组内只有一个元素时，它的类型为元素的类型，这是因为python将（X）当成一个运算类型
print(type(('hello world ',)))  # 若要使只有一个元素的元组类型为tuple，需在元素后加个逗号

'''
总结：
列表可读可写，元组只可读。
1.元组作为很多内置函数和序列类型方法的返回值存在，也就是说，在使用某些函数或者方法时，它的返回值会元组类型，因此你必须对元组进行处理。
2.元组比列表的访问和处理速度更快，因此，当需要对指定元素进行访问，且不涉及修改元素的操作时，建议使用元组。
3.元组可以在映射（和集合的成员）中当做“键”使用，而列表不行。
'''
