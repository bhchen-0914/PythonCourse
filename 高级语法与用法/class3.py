"""
在其他语言里，函数只是一种可执行的代码，并不是对象，Python里函数也可以看做是一个对象
在python里，一切皆对象:
python一切变量、函数都可以用对象的模式来理解，定义变量不用定义变量的类型
可以用一个变量来接收函数，比如 a = func()，可以把一个函数当做另一个函数的参数，甚至可以作为另一个函数的返回值，这就是闭包
"""


def curve_pre():
    a, b, c = 25, 5, 10

    def curve(x):  # 返回抛物线函数
        return a * x ** 2 + b * x + c

    return curve  # 将函数当做返回值,这里返回的不仅仅是一个函数，而是一个闭包，同时返回的还有环境变量（a,b,c）


"""
以上的结构，在函数内部嵌套函数,可以看做闭包的结构，闭包由函数以及定义其时的变量组成,这个变量称为环境变量。
这个变量不能在最内层函数定义，也不能是全局变量。
闭包一旦构成，不会受到变量重新赋值的影响，相当于将一个函数当时调用的现场保存了下来，后续调用时会直接返回这个现场
"""
a = 10  # 这里对a的重新赋值不会影响整体的返回结果

f = curve_pre()  # f 相当于是函数curve()，f(3)等价于调用curve（3）
print(f.__closure__)  # f的本质是一个闭包，包含了函数curve和环境变量,closure是存放闭包环境变量的内置变量
print(f.__closure__[0].cell_contents)  # 打印第一个环境变量的值，也就是a的值，是25
print(f(2))


def f1():
    a = 10

    def f2():
        a = 20  # 被python认为是一个局部变量
        return a

    return f2


f1 = f1()
print(f1.__closure__)  # 打印为none，说明虽然这是一个闭包结构，但没有环境变量，这是因为 a = 20 被python认为a是一个局部变量，并没有引用环境变量
